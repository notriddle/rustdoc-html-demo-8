var searchIndex = new Map(JSON.parse('[\
["safe_arch",{"doc":"A crate that safely exposes arch intrinsics via <code>#[cfg()]</code>.","t":"HHHHHHNNNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQHHHHHHHHHHHHHHHHNNNNNNNNNNNNHHHHHHHHHHHHHHNNNNNNNNNNNNHHHHHHNNNNNNNNNNNNHHHHHHQQQQQQQQQQQQQQQQHHHHHHNNNNNNNNNNNNQQQQQQQQHHHHHHHHHHHHHHHHHHHHHHHNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQQQQQQQQQQQHHHHHHHHQQQQQQHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNHHHHHHQQQQQQHHHHHHNNNNNNQQQQQQQQQQQQQQQQQQQQQQQQQQHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQQQQQQQQQQQQQQQQQQQQQQQQQNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFFFFFHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHNNNNNNNNHHHHHHHHHHHHQQHHHHHHHHHHHHHHQQQQCNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQQQQQQQQQQQHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQQQQQQQQQQQHHHHHHHHHHHHHHHHQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHQQQQNNNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHNNNNNNNNHHHHHHHNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["abs_i16_m128i","abs_i16_m256i","abs_i32_m128i","abs_i32_m256i","abs_i8_m128i","abs_i8_m256i","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_carry_u32","add_carry_u64","add_horizontal_i16_m128i","add_horizontal_i16_m256i","add_horizontal_i32_m128i","add_horizontal_i32_m256i","add_horizontal_m128","add_horizontal_m128d","add_horizontal_m256","add_horizontal_m256d","add_horizontal_saturating_i16_m128i","add_horizontal_saturating_i16_m256i","add_i16_m128i","add_i16_m256i","add_i32_m128i","add_i32_m256i","add_i64_m128i","add_i64_m256i","add_i8_m128i","add_i8_m256i","add_m128","add_m128_s","add_m128d","add_m128d_s","add_m256","add_m256d","add_saturating_i16_m128i","add_saturating_i16_m256i","add_saturating_i8_m128i","add_saturating_i8_m256i","add_saturating_u16_m128i","add_saturating_u16_m256i","add_saturating_u8_m128i","add_saturating_u8_m256i","addsub_m128","addsub_m128d","addsub_m256","addsub_m256d","aes_decrypt_last_m128i","aes_decrypt_m128i","aes_encrypt_last_m128i","aes_encrypt_m128i","aes_inv_mix_columns_m128i","aes_key_gen_assist_m128i","aes_key_gen_assist_m128i","average_u16_m128i","average_u16_m256i","average_u8_m128i","average_u8_m256i","bit_extract2_u32","bit_extract2_u64","bit_extract_u32","bit_extract_u64","bit_lowest_set_mask_u32","bit_lowest_set_mask_u64","bit_lowest_set_reset_u32","bit_lowest_set_reset_u64","bit_lowest_set_value_u32","bit_lowest_set_value_u64","bit_zero_high_index_u32","bit_zero_high_index_u64","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_m128","bitand_m128d","bitand_m128i","bitand_m256","bitand_m256d","bitand_m256i","bitandnot_m128","bitandnot_m128d","bitandnot_m128i","bitandnot_m256","bitandnot_m256d","bitandnot_m256i","bitandnot_u32","bitandnot_u64","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_m128","bitor_m128d","bitor_m128i","bitor_m256","bitor_m256d","bitor_m256i","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_m128","bitxor_m128d","bitxor_m128i","bitxor_m256","bitxor_m256d","bitxor_m256i","blend_i32_m128i","blend_i32_m128i","blend_imm_i16_m128i","blend_imm_i16_m128i","blend_imm_i16_m256i","blend_imm_i16_m256i","blend_imm_i32_m256i","blend_imm_i32_m256i","blend_imm_m128","blend_imm_m128","blend_imm_m128d","blend_imm_m128d","blend_imm_m256","blend_imm_m256","blend_imm_m256d","blend_imm_m256d","blend_varying_i8_m128i","blend_varying_i8_m256i","blend_varying_m128","blend_varying_m128d","blend_varying_m256","blend_varying_m256d","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_shl_imm_u128_m128i","byte_shl_imm_u128_m128i","byte_shl_imm_u128_m256i","byte_shl_imm_u128_m256i","byte_shr_imm_u128_m128i","byte_shr_imm_u128_m128i","byte_shr_imm_u128_m256i","byte_shr_imm_u128_m256i","byte_swap_i32","byte_swap_i64","cast_to_m128_from_m128d","cast_to_m128_from_m128i","cast_to_m128_from_m256","cast_to_m128d_from_m128","cast_to_m128d_from_m128i","cast_to_m128d_from_m256d","cast_to_m128i_from_m128","cast_to_m128i_from_m128d","cast_to_m128i_from_m256i","cast_to_m256_from_m256d","cast_to_m256_from_m256i","cast_to_m256d_from_m256","cast_to_m256d_from_m256i","cast_to_m256i_from_m256","cast_to_m256i_from_m256d","ceil_m128","ceil_m128_s","ceil_m128d","ceil_m128d_s","ceil_m256","ceil_m256d","clone","clone","clone","clone","clone","clone","cmp_eq_i32_m128_s","cmp_eq_i32_m128d_s","cmp_eq_mask_i16_m128i","cmp_eq_mask_i16_m256i","cmp_eq_mask_i32_m128i","cmp_eq_mask_i32_m256i","cmp_eq_mask_i64_m128i","cmp_eq_mask_i64_m256i","cmp_eq_mask_i8_m128i","cmp_eq_mask_i8_m256i","cmp_eq_mask_m128","cmp_eq_mask_m128_s","cmp_eq_mask_m128d","cmp_eq_mask_m128d_s","cmp_ge_i32_m128_s","cmp_ge_i32_m128d_s","cmp_ge_mask_m128","cmp_ge_mask_m128_s","cmp_ge_mask_m128d","cmp_ge_mask_m128d_s","cmp_gt_i32_m128_s","cmp_gt_i32_m128d_s","cmp_gt_mask_i16_m128i","cmp_gt_mask_i16_m256i","cmp_gt_mask_i32_m128i","cmp_gt_mask_i32_m256i","cmp_gt_mask_i64_m128i","cmp_gt_mask_i64_m256i","cmp_gt_mask_i8_m128i","cmp_gt_mask_i8_m256i","cmp_gt_mask_m128","cmp_gt_mask_m128_s","cmp_gt_mask_m128d","cmp_gt_mask_m128d_s","cmp_le_i32_m128_s","cmp_le_i32_m128d_s","cmp_le_mask_m128","cmp_le_mask_m128_s","cmp_le_mask_m128d","cmp_le_mask_m128d_s","cmp_lt_i32_m128_s","cmp_lt_i32_m128d_s","cmp_lt_mask_i16_m128i","cmp_lt_mask_i32_m128i","cmp_lt_mask_i8_m128i","cmp_lt_mask_m128","cmp_lt_mask_m128_s","cmp_lt_mask_m128d","cmp_lt_mask_m128d_s","cmp_neq_i32_m128_s","cmp_neq_i32_m128d_s","cmp_neq_mask_m128","cmp_neq_mask_m128_s","cmp_neq_mask_m128d","cmp_neq_mask_m128d_s","cmp_nge_mask_m128","cmp_nge_mask_m128_s","cmp_nge_mask_m128d","cmp_nge_mask_m128d_s","cmp_ngt_mask_m128","cmp_ngt_mask_m128_s","cmp_ngt_mask_m128d","cmp_ngt_mask_m128d_s","cmp_nle_mask_m128","cmp_nle_mask_m128_s","cmp_nle_mask_m128d","cmp_nle_mask_m128d_s","cmp_nlt_mask_m128","cmp_nlt_mask_m128_s","cmp_nlt_mask_m128d","cmp_nlt_mask_m128d_s","cmp_op_mask_m128","cmp_op_mask_m128","cmp_op_mask_m128_s","cmp_op_mask_m128_s","cmp_op_mask_m128d","cmp_op_mask_m128d","cmp_op_mask_m128d_s","cmp_op_mask_m128d_s","cmp_op_mask_m256","cmp_op_mask_m256","cmp_op_mask_m256d","cmp_op_mask_m256d","cmp_ordinary_mask_m128","cmp_ordinary_mask_m128_s","cmp_ordinary_mask_m128d","cmp_ordinary_mask_m128d_s","cmp_unord_mask_m128","cmp_unord_mask_m128_s","cmp_unord_mask_m128d","cmp_unord_mask_m128d_s","combined_byte_shr_imm_m128i","combined_byte_shr_imm_m128i","combined_byte_shr_imm_m256i","combined_byte_shr_imm_m256i","comparison_operator_translation","comparison_operator_translation","convert_i32_replace_m128_s","convert_i32_replace_m128d_s","convert_i64_replace_m128d_s","convert_m128_s_replace_m128d_s","convert_m128d_s_replace_m128_s","convert_to_f32_from_m256_s","convert_to_f64_from_m256d_s","convert_to_i16_m128i_from_lower2_i16_m128i","convert_to_i16_m128i_from_lower8_i8_m128i","convert_to_i16_m256i_from_i8_m128i","convert_to_i16_m256i_from_lower4_u8_m128i","convert_to_i16_m256i_from_lower8_u8_m128i","convert_to_i16_m256i_from_u8_m128i","convert_to_i32_from_m256i_s","convert_to_i32_m128i_from_lower4_i16_m128i","convert_to_i32_m128i_from_lower4_i8_m128i","convert_to_i32_m128i_from_m128","convert_to_i32_m128i_from_m128d","convert_to_i32_m128i_from_m256d","convert_to_i32_m256i_from_i16_m128i","convert_to_i32_m256i_from_lower8_i8_m128i","convert_to_i32_m256i_from_m256","convert_to_i32_m256i_from_u16_m128i","convert_to_i64_m128i_from_lower2_i32_m128i","convert_to_i64_m128i_from_lower2_i8_m128i","convert_to_i64_m256i_from_i32_m128i","convert_to_i64_m256i_from_lower4_i16_m128i","convert_to_i64_m256i_from_lower4_i8_m128i","convert_to_i64_m256i_from_lower4_u16_m128i","convert_to_i64_m256i_from_u32_m128i","convert_to_m128_from_i32_m128i","convert_to_m128_from_m128d","convert_to_m128_from_m256d","convert_to_m128d_from_lower2_i32_m128i","convert_to_m128d_from_lower2_m128","convert_to_m256_from_i32_m256i","convert_to_m256d_from_i32_m128i","convert_to_m256d_from_m128","convert_to_u16_m128i_from_lower8_u8_m128i","convert_to_u32_m128i_from_lower4_u16_m128i","convert_to_u32_m128i_from_lower4_u8_m128i","convert_to_u64_m128i_from_lower2_u16_m128i","convert_to_u64_m128i_from_lower2_u32_m128i","convert_to_u64_m128i_from_lower2_u8_m128i","convert_truncate_to_i32_m128i_from_m256d","convert_truncate_to_i32_m256i_from_m256","copy_i64_m128i_s","copy_replace_low_f64_m128d","crc32_u16","crc32_u32","crc32_u64","crc32_u8","default","default","default","default","default","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_m128","div_m128_s","div_m128d","div_m128d_s","div_m256","div_m256d","dot_product_m128","dot_product_m128","dot_product_m128d","dot_product_m128d","dot_product_m256","dot_product_m256","duplicate_even_lanes_m128","duplicate_even_lanes_m256","duplicate_low_lane_m128d_s","duplicate_odd_lanes_m128","duplicate_odd_lanes_m256","duplicate_odd_lanes_m256d","eq","eq","eq","eq","eq","eq","extract_f32_as_i32_bits_imm_m128","extract_f32_as_i32_bits_imm_m128","extract_i16_as_i32_m128i","extract_i16_as_i32_m128i","extract_i16_as_i32_m256i","extract_i16_as_i32_m256i","extract_i32_from_m256i","extract_i32_from_m256i","extract_i32_imm_m128i","extract_i32_imm_m128i","extract_i64_from_m256i","extract_i64_from_m256i","extract_i64_imm_m128i","extract_i64_imm_m128i","extract_i8_as_i32_imm_m128i","extract_i8_as_i32_imm_m128i","extract_i8_as_i32_m256i","extract_i8_as_i32_m256i","extract_m128_from_m256","extract_m128_from_m256","extract_m128d_from_m256d","extract_m128d_from_m256d","extract_m128i_from_m256i","extract_m128i_from_m256i","extract_m128i_m256i","extract_m128i_m256i","floor_m128","floor_m128_s","floor_m128d","floor_m128d_s","floor_m256","floor_m256d","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_bits","from_bits","from_bits","from_bits","fused_mul_add_m128","fused_mul_add_m128_s","fused_mul_add_m128d","fused_mul_add_m128d_s","fused_mul_add_m256","fused_mul_add_m256d","fused_mul_addsub_m128","fused_mul_addsub_m128d","fused_mul_addsub_m256","fused_mul_addsub_m256d","fused_mul_neg_add_m128","fused_mul_neg_add_m128_s","fused_mul_neg_add_m128d","fused_mul_neg_add_m128d_s","fused_mul_neg_add_m256","fused_mul_neg_add_m256d","fused_mul_neg_sub_m128","fused_mul_neg_sub_m128_s","fused_mul_neg_sub_m128d","fused_mul_neg_sub_m128d_s","fused_mul_neg_sub_m256","fused_mul_neg_sub_m256d","fused_mul_sub_m128","fused_mul_sub_m128_s","fused_mul_sub_m128d","fused_mul_sub_m128d_s","fused_mul_sub_m256","fused_mul_sub_m256d","fused_mul_subadd_m128","fused_mul_subadd_m128d","fused_mul_subadd_m256","fused_mul_subadd_m256d","get_f32_from_m128_s","get_f64_from_m128d_s","get_i32_from_m128_s","get_i32_from_m128d_s","get_i32_from_m128i_s","get_i64_from_m128d_s","get_i64_from_m128i_s","insert_f32_imm_m128","insert_f32_imm_m128","insert_i16_from_i32_m128i","insert_i16_from_i32_m128i","insert_i16_to_m256i","insert_i16_to_m256i","insert_i32_imm_m128i","insert_i32_imm_m128i","insert_i32_to_m256i","insert_i32_to_m256i","insert_i64_imm_m128i","insert_i64_imm_m128i","insert_i64_to_m256i","insert_i64_to_m256i","insert_i8_imm_m128i","insert_i8_imm_m128i","insert_i8_to_m256i","insert_i8_to_m256i","insert_m128_to_m256","insert_m128_to_m256","insert_m128d_to_m256d","insert_m128d_to_m256d","insert_m128i_to_m256i","insert_m128i_to_m256i","insert_m128i_to_m256i_slow_avx","insert_m128i_to_m256i_slow_avx","into","into","into","into","into","into","leading_zero_count_u32","leading_zero_count_u64","load_f32_m128_s","load_f32_splat_m128","load_f32_splat_m256","load_f64_m128d_s","load_f64_splat_m128d","load_f64_splat_m256d","load_i64_m128i_s","load_m128","load_m128_splat_m256","load_m128d","load_m128d_splat_m256d","load_m128i","load_m256","load_m256d","load_m256i","load_masked_i32_m128i","load_masked_i32_m256i","load_masked_i64_m128i","load_masked_i64_m256i","load_masked_m128","load_masked_m128d","load_masked_m256","load_masked_m256d","load_replace_high_m128d","load_replace_low_m128d","load_reverse_m128","load_reverse_m128d","load_unaligned_hi_lo_m256","load_unaligned_hi_lo_m256d","load_unaligned_hi_lo_m256i","load_unaligned_m128","load_unaligned_m128d","load_unaligned_m128i","load_unaligned_m256","load_unaligned_m256d","load_unaligned_m256i","m128","m128d","m128i","m256","m256d","m256i","max_i16_m128i","max_i16_m256i","max_i32_m128i","max_i32_m256i","max_i8_m128i","max_i8_m256i","max_m128","max_m128_s","max_m128d","max_m128d_s","max_m256","max_m256d","max_u16_m128i","max_u16_m256i","max_u32_m128i","max_u32_m256i","max_u8_m128i","max_u8_m256i","min_i16_m128i","min_i16_m256i","min_i32_m128i","min_i32_m256i","min_i8_m128i","min_i8_m256i","min_m128","min_m128_s","min_m128d","min_m128d_s","min_m256","min_m256d","min_position_u16_m128i","min_u16_m128i","min_u16_m256i","min_u32_m128i","min_u32_m256i","min_u8_m128i","min_u8_m256i","move_high_low_m128","move_low_high_m128","move_m128_s","move_mask_i8_m128i","move_mask_m128","move_mask_m128d","move_mask_m256","move_mask_m256d","move_mask_m256i","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_extended_u32","mul_extended_u64","mul_i16_horizontal_add_m128i","mul_i16_horizontal_add_m256i","mul_i16_keep_high_m128i","mul_i16_keep_high_m256i","mul_i16_keep_low_m128i","mul_i16_keep_low_m256i","mul_i16_scale_round_m128i","mul_i16_scale_round_m256i","mul_i32_keep_low_m128i","mul_i32_keep_low_m256i","mul_i64_carryless_m128i","mul_i64_carryless_m128i","mul_i64_low_bits_m256i","mul_m128","mul_m128_s","mul_m128d","mul_m128d_s","mul_m256","mul_m256d","mul_u16_keep_high_m128i","mul_u16_keep_high_m256i","mul_u64_low_bits_m256i","mul_u8i8_add_horizontal_saturating_m128i","mul_u8i8_add_horizontal_saturating_m256i","mul_widen_i32_odd_m128i","mul_widen_u32_odd_m128i","multi_packed_sum_abs_diff_u8_m128i","multi_packed_sum_abs_diff_u8_m128i","multi_packed_sum_abs_diff_u8_m256i","multi_packed_sum_abs_diff_u8_m256i","naming_conventions","neg","neg","neg","neg","not","not","not","not","not","not","pack_i16_to_i8_m128i","pack_i16_to_i8_m256i","pack_i16_to_u8_m128i","pack_i16_to_u8_m256i","pack_i32_to_i16_m128i","pack_i32_to_i16_m256i","pack_i32_to_u16_m128i","pack_i32_to_u16_m256i","population_count_i32","population_count_i64","population_deposit_u32","population_deposit_u64","population_extract_u32","population_extract_u64","rdrand_u16","rdrand_u32","rdrand_u64","rdseed_u16","rdseed_u32","rdseed_u64","read_timestamp_counter","read_timestamp_counter_p","reciprocal_m128","reciprocal_m128_s","reciprocal_m256","reciprocal_sqrt_m128","reciprocal_sqrt_m128_s","reciprocal_sqrt_m256","round_m128","round_m128","round_m128_s","round_m128_s","round_m128d","round_m128d","round_m128d_s","round_m128d_s","round_m256","round_m256","round_m256d","round_m256d","set_i16_m128i","set_i16_m256i","set_i32_m128i","set_i32_m128i_s","set_i32_m256i","set_i64_m128i","set_i64_m128i_s","set_i8_m128i","set_i8_m256i","set_m128","set_m128_s","set_m128d","set_m128d_m256d","set_m128d_s","set_m128i_m256i","set_m256","set_m256d","set_reversed_i16_m128i","set_reversed_i16_m256i","set_reversed_i32_m128i","set_reversed_i32_m256i","set_reversed_i8_m128i","set_reversed_i8_m256i","set_reversed_m128","set_reversed_m128d","set_reversed_m128d_m256d","set_reversed_m128i_m256i","set_reversed_m256","set_reversed_m256d","set_splat_i16_m128i","set_splat_i16_m128i_s_m256i","set_splat_i16_m256i","set_splat_i32_m128i","set_splat_i32_m128i_s_m256i","set_splat_i32_m256i","set_splat_i64_m128i","set_splat_i64_m128i_s_m256i","set_splat_i8_m128i","set_splat_i8_m128i_s_m256i","set_splat_i8_m256i","set_splat_m128","set_splat_m128_s_m256","set_splat_m128d","set_splat_m128d_s_m256d","set_splat_m256","set_splat_m256d","shl_all_u16_m128i","shl_all_u16_m256i","shl_all_u32_m128i","shl_all_u32_m256i","shl_all_u64_m128i","shl_all_u64_m256i","shl_each_u32_m128i","shl_each_u32_m256i","shl_each_u64_m128i","shl_each_u64_m256i","shl_imm_u16_m128i","shl_imm_u16_m128i","shl_imm_u16_m256i","shl_imm_u16_m256i","shl_imm_u32_m128i","shl_imm_u32_m128i","shl_imm_u32_m256i","shl_imm_u32_m256i","shl_imm_u64_m128i","shl_imm_u64_m128i","shl_imm_u64_m256i","shl_imm_u64_m256i","shr_all_i16_m128i","shr_all_i16_m256i","shr_all_i32_m128i","shr_all_i32_m256i","shr_all_u16_m128i","shr_all_u16_m256i","shr_all_u32_m128i","shr_all_u32_m256i","shr_all_u64_m128i","shr_all_u64_m256i","shr_each_i32_m128i","shr_each_i32_m256i","shr_each_u32_m128i","shr_each_u32_m256i","shr_each_u64_m128i","shr_each_u64_m256i","shr_imm_i16_m128i","shr_imm_i16_m128i","shr_imm_i16_m256i","shr_imm_i16_m256i","shr_imm_i32_m128i","shr_imm_i32_m128i","shr_imm_i32_m256i","shr_imm_i32_m256i","shr_imm_u16_m128i","shr_imm_u16_m128i","shr_imm_u16_m256i","shr_imm_u16_m256i","shr_imm_u32_m128i","shr_imm_u32_m128i","shr_imm_u32_m256i","shr_imm_u32_m256i","shr_imm_u64_m128i","shr_imm_u64_m128i","shr_imm_u64_m256i","shr_imm_u64_m256i","shuffle_abi_f128z_all_m256","shuffle_abi_f128z_all_m256","shuffle_abi_f128z_all_m256d","shuffle_abi_f128z_all_m256d","shuffle_abi_f128z_all_m256i","shuffle_abi_f128z_all_m256i","shuffle_abi_f32_all_m128","shuffle_abi_f32_all_m128","shuffle_abi_f32_half_m256","shuffle_abi_f32_half_m256","shuffle_abi_f64_all_m128d","shuffle_abi_f64_all_m128d","shuffle_abi_f64_half_m256d","shuffle_abi_f64_half_m256d","shuffle_abi_i128z_all_m256i","shuffle_abi_i128z_all_m256i","shuffle_ai_f32_all_m128","shuffle_ai_f32_all_m128","shuffle_ai_f32_all_m128i","shuffle_ai_f32_all_m128i","shuffle_ai_f32_half_m256","shuffle_ai_f32_half_m256","shuffle_ai_f64_all_m128d","shuffle_ai_f64_all_m128d","shuffle_ai_f64_all_m256d","shuffle_ai_f64_all_m256d","shuffle_ai_f64_half_m256d","shuffle_ai_f64_half_m256d","shuffle_ai_i16_h64all_m128i","shuffle_ai_i16_h64all_m128i","shuffle_ai_i16_h64half_m256i","shuffle_ai_i16_h64half_m256i","shuffle_ai_i16_l64all_m128i","shuffle_ai_i16_l64all_m128i","shuffle_ai_i16_l64half_m256i","shuffle_ai_i16_l64half_m256i","shuffle_ai_i32_half_m256i","shuffle_ai_i32_half_m256i","shuffle_ai_i64_all_m256i","shuffle_ai_i64_all_m256i","shuffle_av_f32_all_m128","shuffle_av_f32_half_m256","shuffle_av_f64_all_m128d","shuffle_av_f64_half_m256d","shuffle_av_i32_all_m256","shuffle_av_i32_all_m256i","shuffle_av_i8z_all_m128i","shuffle_av_i8z_half_m256i","sign_apply_i16_m128i","sign_apply_i16_m256i","sign_apply_i32_m128i","sign_apply_i32_m256i","sign_apply_i8_m128i","sign_apply_i8_m256i","splat_i16_m128i_s_m128i","splat_i32_m128i_s_m128i","splat_i64_m128i_s_m128i","splat_i8_m128i_s_m128i","splat_m128_s_m128","splat_m128d_s_m128d","splat_m128i_m256i","sqrt_m128","sqrt_m128_s","sqrt_m128d","sqrt_m128d_s","sqrt_m256","sqrt_m256d","store_high_m128d_s","store_i64_m128i_s","store_m128","store_m128_s","store_m128d","store_m128d_s","store_m128i","store_m256","store_m256d","store_m256i","store_masked_i32_m128i","store_masked_i32_m256i","store_masked_i64_m128i","store_masked_i64_m256i","store_masked_m128","store_masked_m128d","store_masked_m256","store_masked_m256d","store_reverse_m128","store_reversed_m128d","store_splat_m128","store_splat_m128d","store_unaligned_hi_lo_m256","store_unaligned_hi_lo_m256d","store_unaligned_hi_lo_m256i","store_unaligned_m128","store_unaligned_m128d","store_unaligned_m128i","store_unaligned_m256","store_unaligned_m256d","store_unaligned_m256i","string_search_for_index","string_search_for_index","string_search_for_mask","string_search_for_mask","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_horizontal_i16_m128i","sub_horizontal_i16_m256i","sub_horizontal_i32_m128i","sub_horizontal_i32_m256i","sub_horizontal_m128","sub_horizontal_m128d","sub_horizontal_m256","sub_horizontal_m256d","sub_horizontal_saturating_i16_m128i","sub_horizontal_saturating_i16_m256i","sub_i16_m128i","sub_i16_m256i","sub_i32_m128i","sub_i32_m256i","sub_i64_m128i","sub_i64_m256i","sub_i8_m128i","sub_i8_m256i","sub_m128","sub_m128_s","sub_m128d","sub_m128d_s","sub_m256","sub_m256d","sub_saturating_i16_m128i","sub_saturating_i16_m256i","sub_saturating_i8_m128i","sub_saturating_i8_m256i","sub_saturating_u16_m128i","sub_saturating_u16_m256i","sub_saturating_u8_m128i","sub_saturating_u8_m256i","sum_of_u8_abs_diff_m128i","sum_of_u8_abs_diff_m256i","test_all_ones_m128i","test_all_zeroes_m128i","test_mixed_ones_and_zeroes_m128i","to_array","to_array","to_array","to_array","to_bits","to_bits","to_bits","to_bits","trailing_zero_count_u32","trailing_zero_count_u64","transpose_four_m128","truncate_m128_to_m128i","truncate_m128d_to_m128i","truncate_to_i32_m128d_s","truncate_to_i64_m128d_s","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unpack_hi_m256","unpack_hi_m256d","unpack_high_i16_m128i","unpack_high_i16_m256i","unpack_high_i32_m128i","unpack_high_i32_m256i","unpack_high_i64_m128i","unpack_high_i64_m256i","unpack_high_i8_m128i","unpack_high_i8_m256i","unpack_high_m128","unpack_high_m128d","unpack_lo_m256","unpack_lo_m256d","unpack_low_i16_m128i","unpack_low_i16_m256i","unpack_low_i32_m128i","unpack_low_i32_m256i","unpack_low_i64_m128i","unpack_low_i64_m256i","unpack_low_i8_m128i","unpack_low_i8_m256i","unpack_low_m128","unpack_low_m128d","zero_extend_m128","zero_extend_m128d","zero_extend_m128i","zeroed_m128","zeroed_m128d","zeroed_m128i","zeroed_m256","zeroed_m256d","zeroed_m256i"],"q":[[0,"safe_arch"],[1082,"core::fmt"],[1083,"core::fmt"],[1084,"core::any"]],"d":["Lanewise absolute value with lanes as <code>i16</code>.","Absolute value of <code>i16</code> lanes.","Lanewise absolute value with lanes as <code>i32</code>.","Absolute value of <code>i32</code> lanes.","Lanewise absolute value with lanes as <code>i8</code>.","Absolute value of <code>i8</code> lanes.","","","","","","","","","Add two <code>u32</code> with a carry value.","Add two <code>u64</code> with a carry value.","Add horizontal pairs of <code>i16</code> values, pack the outputs as <code>a</code> …","Horizontal <code>a + b</code> with lanes as <code>i16</code>.","Add horizontal pairs of <code>i32</code> values, pack the outputs as <code>a</code> …","Horizontal <code>a + b</code> with lanes as <code>i32</code>.","Add each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.","Add each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.","Add adjacent <code>f32</code> lanes.","Add adjacent <code>f64</code> lanes.","Add horizontal pairs of <code>i16</code> values, saturating, pack the …","Horizontal saturating <code>a + b</code> with lanes as <code>i16</code>.","Lanewise <code>a + b</code> with lanes as <code>i16</code>.","Lanewise <code>a + b</code> with lanes as <code>i16</code>.","Lanewise <code>a + b</code> with lanes as <code>i32</code>.","Lanewise <code>a + b</code> with lanes as <code>i32</code>.","Lanewise <code>a + b</code> with lanes as <code>i64</code>.","Lanewise <code>a + b</code> with lanes as <code>i64</code>.","Lanewise <code>a + b</code> with lanes as <code>i8</code>.","Lanewise <code>a + b</code> with lanes as <code>i8</code>.","Lanewise <code>a + b</code>.","Low lane <code>a + b</code>, other lanes unchanged.","Lanewise <code>a + b</code>.","Lowest lane <code>a + b</code>, high lane unchanged.","Lanewise <code>a + b</code> with <code>f32</code> lanes.","Lanewise <code>a + b</code> with <code>f64</code> lanes.","Lanewise saturating <code>a + b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u8</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u8</code>.","Alternately, from the top, add a lane and then subtract a …","Add the high lane and subtract the low lane.","Alternately, from the top, add <code>f32</code> then sub <code>f32</code>.","Alternately, from the top, add <code>f64</code> then sub <code>f64</code>.","“Perform the last round of AES decryption flow on <code>a</code> …","“Perform one round of AES decryption flow on <code>a</code> using the …","“Perform the last round of AES encryption flow on <code>a</code> …","“Perform one round of AES encryption flow on <code>a</code> using the …","“Perform the InvMixColumns transform on <code>a</code>.”","?","?","Lanewise average of the <code>u16</code> values.","Average <code>u16</code> lanes.","Lanewise average of the <code>u8</code> values.","Average <code>u8</code> lanes.","Extract a span of bits from the <code>u32</code>, control value style.","Extract a span of bits from the <code>u64</code>, control value style.","Extract a span of bits from the <code>u32</code>, start and len style.","Extract a span of bits from the <code>u64</code>, start and len style.","Gets the mask of all bits up to and including the lowest …","Gets the mask of all bits up to and including the lowest …","Resets (clears) the lowest set bit.","Resets (clears) the lowest set bit.","Gets the <em>value</em> of the lowest set bit in a <code>u32</code>.","Gets the <em>value</em> of the lowest set bit in a <code>u64</code>.","Zero out all high bits in a <code>u32</code> starting at the index …","Zero out all high bits in a <code>u64</code> starting at the index …","","","","","","","","","","","","","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code> for <code>u32</code>","Bitwise <code>(!a) &amp; b</code> for <code>u64</code>","","","","","","","","","","","","","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>","","","","","","","","","","","","","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Blends the <code>i32</code> lanes in <code>$a</code> and <code>$b</code> into a single value.","Blends the <code>i32</code> lanes in <code>$a</code> and <code>$b</code> into a single value.","Blends the <code>i16</code> lanes according to the immediate mask.","Blends the <code>i16</code> lanes according to the immediate mask.","Blends the <code>i16</code> lanes according to the immediate value.","Blends the <code>i16</code> lanes according to the immediate value.","Blends the <code>i32</code> lanes according to the immediate value.","Blends the <code>i32</code> lanes according to the immediate value.","Blends the lanes according to the immediate mask.","Blends the lanes according to the immediate mask.","Blends the lanes according to the immediate mask.","Blends the lanes according to the immediate mask.","Blends the <code>f32</code> lanes according to the immediate mask.","Blends the <code>f32</code> lanes according to the immediate mask.","Blends the <code>f64</code> lanes according to the immediate mask.","Blends the <code>f64</code> lanes according to the immediate mask.","Blend the <code>i8</code> lanes according to a runtime varying mask.","Blend <code>i8</code> lanes according to a runtime varying mask.","Blend the lanes according to a runtime varying mask.","Blend the lanes according to a runtime varying mask.","Blend the lanes according to a runtime varying mask.","Blend the lanes according to a runtime varying mask.","","","","","","","","","","","","","Shifts all bits in the entire register left by a number of …","Shifts all bits in the entire register left by a number of …","Shifts each <code>u128</code> lane left by a number of <strong>bytes</strong>.","Shifts each <code>u128</code> lane left by a number of <strong>bytes</strong>.","Shifts all bits in the entire register right by a number …","Shifts all bits in the entire register right by a number …","Shifts each <code>u128</code> lane right by a number of <strong>bytes</strong>.","Shifts each <code>u128</code> lane right by a number of <strong>bytes</strong>.","Swap the bytes of the given 32-bit value.","Swap the bytes of the given 64-bit value.","Bit-preserving cast to <code>m128</code> from <code>m128d</code>","Bit-preserving cast to <code>m128</code> from <code>m128i</code>","Bit-preserving cast to <code>m128</code> from <code>m256</code>.","Bit-preserving cast to <code>m128d</code> from <code>m128</code>","Bit-preserving cast to <code>m128d</code> from <code>m128i</code>","Bit-preserving cast to <code>m128d</code> from <code>m256d</code>.","Bit-preserving cast to <code>m128i</code> from <code>m128</code>","Bit-preserving cast to <code>m128i</code> from <code>m128d</code>","Bit-preserving cast to <code>m128i</code> from <code>m256i</code>.","Bit-preserving cast to <code>m256</code> from <code>m256d</code>.","Bit-preserving cast to <code>m256</code> from <code>m256i</code>.","Bit-preserving cast to <code>m256i</code> from <code>m256</code>.","Bit-preserving cast to <code>m256d</code> from <code>m256i</code>.","Bit-preserving cast to <code>m256i</code> from <code>m256</code>.","Bit-preserving cast to <code>m256i</code> from <code>m256d</code>.","Round each lane to a whole number, towards positive …","Round the low lane of <code>b</code> toward positive infinity, other …","Round each lane to a whole number, towards positive …","Round the low lane of <code>b</code> toward positive infinity, high …","Round <code>f32</code> lanes towards positive infinity.","Round <code>f64</code> lanes towards positive infinity.","","","","","","","Low lane equality.","Low lane <code>f64</code> equal to.","Lanewise <code>a == b</code> with lanes as <code>i16</code>.","Compare <code>i16</code> lanes for equality, mask output.","Lanewise <code>a == b</code> with lanes as <code>i32</code>.","Compare <code>i32</code> lanes for equality, mask output.","Lanewise <code>a == b</code> with lanes as <code>i64</code>.","Compare <code>i64</code> lanes for equality, mask output.","Lanewise <code>a == b</code> with lanes as <code>i8</code>.","Compare <code>i8</code> lanes for equality, mask output.","Lanewise <code>a == b</code>.","Low lane <code>a == b</code>, other lanes unchanged.","Lanewise <code>a == b</code>, mask output.","Low lane <code>a == b</code>, other lanes unchanged.","Low lane greater than or equal to.","Low lane <code>f64</code> greater than or equal to.","Lanewise <code>a &gt;= b</code>.","Low lane <code>a &gt;= b</code>, other lanes unchanged.","Lanewise <code>a &gt;= b</code>.","Low lane <code>a &gt;= b</code>, other lanes unchanged.","Low lane greater than.","Low lane <code>f64</code> greater than.","Lanewise <code>a &gt; b</code> with lanes as <code>i16</code>.","Compare <code>i16</code> lanes for <code>a &gt; b</code>, mask output.","Lanewise <code>a &gt; b</code> with lanes as <code>i32</code>.","Compare <code>i32</code> lanes for <code>a &gt; b</code>, mask output.","Lanewise <code>a &gt; b</code> with lanes as <code>i64</code>.","Compare <code>i64</code> lanes for <code>a &gt; b</code>, mask output.","Lanewise <code>a &gt; b</code> with lanes as <code>i8</code>.","Compare <code>i8</code> lanes for <code>a &gt; b</code>, mask output.","Lanewise <code>a &gt; b</code>.","Low lane <code>a &gt; b</code>, other lanes unchanged.","Lanewise <code>a &gt; b</code>.","Low lane <code>a &gt; b</code>, other lanes unchanged.","Low lane less than or equal to.","Low lane <code>f64</code> less than or equal to.","Lanewise <code>a &lt;= b</code>.","Low lane <code>a &lt;= b</code>, other lanes unchanged.","Lanewise <code>a &lt;= b</code>.","Low lane <code>a &lt;= b</code>, other lanes unchanged.","Low lane less than.","Low lane <code>f64</code> less than.","Lanewise <code>a &lt; b</code> with lanes as <code>i16</code>.","Lanewise <code>a &lt; b</code> with lanes as <code>i32</code>.","Lanewise <code>a &lt; b</code> with lanes as <code>i8</code>.","Lanewise <code>a &lt; b</code>.","Low lane <code>a &lt; b</code>, other lanes unchanged.","Lanewise <code>a &lt; b</code>.","Low lane <code>a &lt; b</code>, other lane unchanged.","Low lane not equal to.","Low lane <code>f64</code> less than.","Lanewise <code>a != b</code>.","Low lane <code>a != b</code>, other lanes unchanged.","Lanewise <code>a != b</code>.","Low lane <code>a != b</code>, other lane unchanged.","Lanewise <code>!(a &gt;= b)</code>.","Low lane <code>!(a &gt;= b)</code>, other lanes unchanged.","Lanewise <code>!(a &gt;= b)</code>.","Low lane <code>!(a &gt;= b)</code>, other lane unchanged.","Lanewise <code>!(a &gt; b)</code>.","Low lane <code>!(a &gt; b)</code>, other lanes unchanged.","Lanewise <code>!(a &gt; b)</code>.","Low lane <code>!(a &gt; b)</code>, other lane unchanged.","Lanewise <code>!(a &lt;= b)</code>.","Low lane <code>!(a &lt;= b)</code>, other lanes unchanged.","Lanewise <code>!(a &lt;= b)</code>.","Low lane <code>!(a &lt;= b)</code>, other lane unchanged.","Lanewise <code>!(a &lt; b)</code>.","Low lane <code>!(a &lt; b)</code>, other lanes unchanged.","Lanewise <code>!(a &lt; b)</code>.","Low lane <code>!(a &lt; b)</code>, other lane unchanged.","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f32</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Compare <code>f64</code> lanes according to the operation specified, …","Lanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.","Low lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lanes …","Lanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.","Low lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lane …","Lanewise <code>a.is_nan() | b.is_nan()</code>.","Low lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.","Lanewise <code>a.is_nan() | b.is_nan()</code>.","Low lane <code>a.is_nan() | b.is_nan()</code>, other lane unchanged.","Counts <code>$a</code> as the high bytes and <code>$b</code> as the low bytes then …","Counts <code>$a</code> as the high bytes and <code>$b</code> as the low bytes then …","Works like <code>combined_byte_shr_imm_m128i</code>, but twice as wide.","Works like <code>combined_byte_shr_imm_m128i</code>, but twice as wide.","Turns a comparison operator token to the correct constant …","Turns a comparison operator token to the correct constant …","Convert <code>i32</code> to <code>f32</code> and replace the low lane of the input.","Convert <code>i32</code> to <code>f64</code> and replace the low lane of the input.","Convert <code>i64</code> to <code>f64</code> and replace the low lane of the input.","Converts the lower <code>f32</code> to <code>f64</code> and replace the low lane of …","Converts the low <code>f64</code> to <code>f32</code> and replaces the low lane of …","Convert the lowest <code>f32</code> lane to a single <code>f32</code>.","Convert the lowest <code>f64</code> lane to a single <code>f64</code>.","Convert the lower two <code>i64</code> lanes to two <code>i32</code> lanes.","Convert the lower eight <code>i8</code> lanes to eight <code>i16</code> lanes.","Convert <code>i8</code> values to <code>i16</code> values.","Convert lower 4 <code>u8</code> values to <code>i16</code> values.","Convert lower 8 <code>u8</code> values to <code>i16</code> values.","Convert <code>u8</code> values to <code>i16</code> values.","Convert the lowest <code>i32</code> lane to a single <code>i32</code>.","Convert the lower four <code>i16</code> lanes to four <code>i32</code> lanes.","Convert the lower four <code>i8</code> lanes to four <code>i32</code> lanes.","Rounds the <code>f32</code> lanes to <code>i32</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>i32</code> lanes.","Convert <code>f64</code> lanes to be <code>i32</code> lanes.","Convert <code>i16</code> values to <code>i32</code> values.","Convert the lower 8 <code>i8</code> values to <code>i32</code> values.","Convert <code>f32</code> lanes to be <code>i32</code> lanes.","Convert <code>u16</code> values to <code>i32</code> values.","Convert the lower two <code>i32</code> lanes to two <code>i64</code> lanes.","Convert the lower two <code>i8</code> lanes to two <code>i64</code> lanes.","Convert <code>i32</code> values to <code>i64</code> values.","Convert <code>i16</code> values to <code>i64</code> values.","Convert the lower 4 <code>i8</code> values to <code>i64</code> values.","Convert <code>u16</code> values to <code>i64</code> values.","Convert <code>u32</code> values to <code>i64</code> values.","Rounds the four <code>i32</code> lanes to four <code>f32</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.","Convert <code>f64</code> lanes to be <code>f32</code> lanes.","Rounds the lower two <code>i32</code> lanes to two <code>f64</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.","Convert <code>i32</code> lanes to be <code>f32</code> lanes.","Convert <code>i32</code> lanes to be <code>f64</code> lanes.","Convert <code>f32</code> lanes to be <code>f64</code> lanes.","Convert the lower eight <code>u8</code> lanes to eight <code>u16</code> lanes.","Convert the lower four <code>u16</code> lanes to four <code>u32</code> lanes.","Convert the lower four <code>u8</code> lanes to four <code>u32</code> lanes.","Convert the lower two <code>u16</code> lanes to two <code>u64</code> lanes.","Convert the lower two <code>u32</code> lanes to two <code>u64</code> lanes.","Convert the lower two <code>u8</code> lanes to two <code>u64</code> lanes.","Convert <code>f64</code> lanes to <code>i32</code> lanes with truncation.","Convert <code>f32</code> lanes to <code>i32</code> lanes with truncation.","Copy the low <code>i64</code> lane to a new register, upper bits 0.","Copies the <code>a</code> value and replaces the low lane with the low <code>b</code>…","Accumulates the <code>u16</code> into a running CRC32 value.","Accumulates the <code>u32</code> into a running CRC32 value.","Accumulates the <code>u64</code> into a running CRC32 value.","Accumulates the <code>u8</code> into a running CRC32 value.","","","","","","","","","","","","","","","Lanewise <code>a / b</code>.","Low lane <code>a / b</code>, other lanes unchanged.","Lanewise <code>a / b</code>.","Lowest lane <code>a / b</code>, high lane unchanged.","Lanewise <code>a / b</code> with <code>f32</code>.","Lanewise <code>a / b</code> with <code>f64</code>.","Performs a dot product of two <code>m128</code> registers.","Performs a dot product of two <code>m128</code> registers.","Performs a dot product of two <code>m128d</code> registers.","Performs a dot product of two <code>m128d</code> registers.","This works like <code>dot_product_m128</code>, but twice as wide.","This works like <code>dot_product_m128</code>, but twice as wide.","Duplicate the odd lanes to the even lanes.","Duplicate the even-indexed lanes to the odd lanes.","Copy the low lane of the input to both lanes of the output.","Duplicate the odd lanes to the even lanes.","Duplicate the odd-indexed lanes to the even lanes.","Duplicate the odd-indexed lanes to the even lanes.","Not a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …","Not a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …","Not a direct intrinsic, this is a <code>cmp_eq_mask_i8_m128i</code> and …","","","","Gets the <code>f32</code> lane requested. Returns as an <code>i32</code> bit pattern.","Gets the <code>f32</code> lane requested. Returns as an <code>i32</code> bit pattern.","Gets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.","Gets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.","Gets an <code>i16</code> value out of an <code>m256i</code>, returns as <code>i32</code>.","Gets an <code>i16</code> value out of an <code>m256i</code>, returns as <code>i32</code>.","Extracts an <code>i32</code> lane from <code>m256i</code>","Extracts an <code>i32</code> lane from <code>m256i</code>","Gets the <code>i32</code> lane requested. Only the lowest 2 bits are …","Gets the <code>i32</code> lane requested. Only the lowest 2 bits are …","Extracts an <code>i64</code> lane from <code>m256i</code>","Extracts an <code>i64</code> lane from <code>m256i</code>","Gets the <code>i64</code> lane requested. Only the lowest bit is …","Gets the <code>i64</code> lane requested. Only the lowest bit is …","Gets the <code>i8</code> lane requested. Only the lowest 4 bits are …","Gets the <code>i8</code> lane requested. Only the lowest 4 bits are …","Gets an <code>i8</code> value out of an <code>m256i</code>, returns as <code>i32</code>.","Gets an <code>i8</code> value out of an <code>m256i</code>, returns as <code>i32</code>.","Extracts an <code>m128</code> from <code>m256</code>","Extracts an <code>m128</code> from <code>m256</code>","Extracts an <code>m128d</code> from <code>m256d</code>","Extracts an <code>m128d</code> from <code>m256d</code>","Extracts an <code>m128i</code> from <code>m256i</code>","Extracts an <code>m128i</code> from <code>m256i</code>","Gets an <code>m128i</code> value out of an <code>m256i</code>.","Gets an <code>m128i</code> value out of an <code>m256i</code>.","Round each lane to a whole number, towards negative …","Round the low lane of <code>b</code> toward negative infinity, other …","Round each lane to a whole number, towards negative …","Round the low lane of <code>b</code> toward negative infinity, high …","Round <code>f32</code> lanes towards negative infinity.","Round <code>f64</code> lanes towards negative infinity.","UpperExp formats each float.","LowerHex formats each float’s bit pattern (via …","LowerExp formats each float.","Display formats each float, and leaves the type name off …","Debug formats each float.","Octal formats each float’s bit pattern (via <code>f32::to_bits</code>…","UpperHex formats each float’s bit pattern (via …","Binary formats each float’s bit pattern (via <code>f32::to_bits</code>…","LowerExp formats each double.","UpperHex formats each double’s bit pattern (via …","Binary formats each double’s bit pattern (via …","Display formats each double, and leaves the type name off …","UpperExp formats each double.","Octal formats each double’s bit pattern (via <code>f64::to_bits</code>…","Debug formats each double.","LowerHex formats each double’s bit pattern (via …","UpperHex formats each <code>i32</code>.","LowerHex formats each <code>i32</code>.","Display formats each <code>i32</code>, and leaves the type name off of …","Octal formats each <code>i32</code>.","Binary formats each <code>i32</code>.","LowerExp formats each <code>i32</code>.","Debug formats each <code>i32</code>.","UpperExp formats each <code>i32</code>.","Debug formats each float.","UpperHex formats each float’s bit pattern (via …","Binary formats each float’s bit pattern (via <code>f32::to_bits</code>…","Octal formats each float’s bit pattern (via <code>f32::to_bits</code>…","Display formats each float, and leaves the type name off …","LowerHex formats each float’s bit pattern (via …","UpperExp formats each float.","LowerExp formats each float.","Debug formats each double.","LowerHex formats each double’s bit pattern (via …","UpperHex formats each double’s bit pattern (via …","Binary formats each double’s bit pattern (via …","Display formats each double, and leaves the type name off …","UpperExp formats each double.","Octal formats each double’s bit pattern (via <code>f64::to_bits</code>…","LowerExp formats each double.","Octal formats each <code>i32</code>.","UpperHex formats each <code>i32</code>.","Display formats each <code>i32</code>, and leaves the type name off of …","UpperExp formats each <code>i32</code>.","Binary formats each <code>i32</code>.","Debug formats each <code>i32</code>.","LowerExp formats each <code>i32</code>.","LowerHex formats each <code>i32</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Transmutes an array into <code>m128</code>.","Transmutes an array into <code>m128d</code>.","Transmutes an array into <code>m256</code>.","Transmutes an array into <code>m256d</code>.","Converts from the bit patterns of these floats (<code>[u32;4]</code>).","Converts from the bit patterns of these doubles (<code>[u64;2]</code>).","Converts from the bit patterns of these floats (<code>[u32;8]</code>).","Converts from the bit patterns of these doubles (<code>[u64;4]</code>).","Lanewise fused <code>(a * b) + c</code>","Low lane fused <code>(a * b) + c</code>, other lanes unchanged","Lanewise fused <code>(a * b) + c</code>","Low lane fused <code>(a * b) + c</code>, other lanes unchanged","Lanewise fused <code>(a * b) + c</code>","Lanewise fused <code>(a * b) + c</code>","Lanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …","Lanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …","Lanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …","Lanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …","Lanewise fused <code>-(a * b) + c</code>","Low lane <code>-(a * b) + c</code>, other lanes unchanged.","Lanewise fused <code>-(a * b) + c</code>","Low lane <code>-(a * b) + c</code>, other lanes unchanged.","Lanewise fused <code>-(a * b) + c</code>","Lanewise fused <code>-(a * b) + c</code>","Lanewise fused <code>-(a * b) - c</code>","Low lane fused <code>-(a * b) - c</code>, other lanes unchanged.","Lanewise fused <code>-(a * b) - c</code>","Low lane fused <code>-(a * b) - c</code>, other lanes unchanged.","Lanewise fused <code>-(a * b) - c</code>","Lanewise fused <code>-(a * b) - c</code>","Lanewise fused <code>(a * b) - c</code>","Low lane fused <code>(a * b) - c</code>, other lanes unchanged.","Lanewise fused <code>(a * b) - c</code>","Low lane fused <code>(a * b) - c</code>, other lanes unchanged.","Lanewise fused <code>(a * b) - c</code>","Lanewise fused <code>(a * b) - c</code>","Lanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …","Lanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …","Lanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …","Lanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …","Gets the low lane as an individual <code>f32</code> value.","Gets the lower lane as an <code>f64</code> value.","Converts the low lane to <code>i32</code> and extracts as an individual …","Converts the lower lane to an <code>i32</code> value.","Converts the lower lane to an <code>i32</code> value.","Converts the lower lane to an <code>i64</code> value.","Converts the lower lane to an <code>i64</code> value.","Inserts a lane from <code>$b</code> into <code>$a</code>, optionally at a new …","Inserts a lane from <code>$b</code> into <code>$a</code>, optionally at a new …","Inserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.","Inserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.","Inserts an <code>i16</code> to <code>m256i</code>","Inserts an <code>i16</code> to <code>m256i</code>","Inserts a new value for the <code>i32</code> lane specified.","Inserts a new value for the <code>i32</code> lane specified.","Inserts an <code>i32</code> to <code>m256i</code>","Inserts an <code>i32</code> to <code>m256i</code>","Inserts a new value for the <code>i64</code> lane specified.","Inserts a new value for the <code>i64</code> lane specified.","Inserts an <code>i64</code> to <code>m256i</code>","Inserts an <code>i64</code> to <code>m256i</code>","Inserts a new value for the <code>i64</code> lane specified.","Inserts a new value for the <code>i64</code> lane specified.","Inserts an <code>i8</code> to <code>m256i</code>","Inserts an <code>i8</code> to <code>m256i</code>","Inserts an <code>m128</code> to <code>m256</code>","Inserts an <code>m128</code> to <code>m256</code>","Inserts an <code>m128d</code> to <code>m256d</code>","Inserts an <code>m128d</code> to <code>m256d</code>","Inserts an <code>m128i</code> to an <code>m256i</code> at the high or low position.","Inserts an <code>m128i</code> to an <code>m256i</code> at the high or low position.","Slowly inserts an <code>m128i</code> to <code>m256i</code>.","Slowly inserts an <code>m128i</code> to <code>m256i</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Count the leading zeroes in a <code>u32</code>.","Count the leading zeroes in a <code>u64</code>.","Loads the <code>f32</code> reference into the low lane of the register.","Loads the <code>f32</code> reference into all lanes of a register.","Load an <code>f32</code> and splat it to all lanes of an <code>m256d</code>","Loads the reference into the low lane of the register.","Loads the <code>f64</code> reference into all lanes of a register.","Load an <code>f64</code> and splat it to all lanes of an <code>m256d</code>","Loads the low <code>i64</code> into a register.","Loads the reference into a register.","Load an <code>m128</code> and splat it to the lower and upper half of …","Loads the reference into a register.","Load an <code>m128d</code> and splat it to the lower and upper half of …","Loads the reference into a register.","Load data from memory into a register.","Load data from memory into a register.","Load data from memory into a register.","Loads the reference given and zeroes any <code>i32</code> lanes not in …","Loads the reference given and zeroes any <code>i32</code> lanes not in …","Loads the reference given and zeroes any <code>i64</code> lanes not in …","Loads the reference given and zeroes any <code>i64</code> lanes not in …","Load data from memory into a register according to a mask.","Load data from memory into a register according to a mask.","Load data from memory into a register according to a mask.","Load data from memory into a register according to a mask.","Loads the reference into a register, replacing the high …","Loads the reference into a register, replacing the low …","Loads the reference into a register with reversed order.","Loads the reference into a register with reversed order.","Load data from memory into a register.","Load data from memory into a register.","Load data from memory into a register.","Loads the reference into a register.","Loads the reference into a register.","Loads the reference into a register.","Load data from memory into a register.","Load data from memory into a register.","Load data from memory into a register.","The data for a 128-bit SSE register of four <code>f32</code> lanes.","The data for a 128-bit SSE register of two <code>f64</code> values.","The data for a 128-bit SSE register of integer data.","The data for a 256-bit AVX register of eight <code>f32</code> lanes.","The data for a 256-bit AVX register of four <code>f64</code> values.","The data for a 256-bit AVX register of integer data.","Lanewise <code>max(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>i32</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>i32</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>i8</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>i8</code>.","Lanewise <code>max(a, b)</code>.","Low lane <code>max(a, b)</code>, other lanes unchanged.","Lanewise <code>max(a, b)</code>.","Low lane <code>max(a, b)</code>, other lanes unchanged.","Lanewise <code>max(a, b)</code>.","Lanewise <code>max(a, b)</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u16</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u16</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u32</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u32</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u8</code>.","Lanewise <code>max(a, b)</code> with lanes as <code>u8</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i32</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i32</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i8</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i8</code>.","Lanewise <code>min(a, b)</code>.","Low lane <code>min(a, b)</code>, other lanes unchanged.","Lanewise <code>min(a, b)</code>.","Low lane <code>min(a, b)</code>, other lanes unchanged.","Lanewise <code>min(a, b)</code>.","Lanewise <code>min(a, b)</code>.","Min <code>u16</code> value, position, and other lanes zeroed.","Lanewise <code>min(a, b)</code> with lanes as <code>u16</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>u16</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>u32</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>u32</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>u8</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>u8</code>.","Move the high lanes of <code>b</code> to the low lanes of <code>a</code>, other …","Move the low lanes of <code>b</code> to the high lanes of <code>a</code>, other …","Move the low lane of <code>b</code> to <code>a</code>, other lanes unchanged.","Gathers the <code>i8</code> sign bit of each lane.","Gathers the sign bit of each lane.","Gathers the sign bit of each lane.","Collects the sign bit of each lane into a 4-bit value.","Collects the sign bit of each lane into a 4-bit value.","Create an <code>i32</code> mask of each sign bit in the <code>i8</code> lanes.","","","","","","","","","Multiply two <code>u32</code>, outputting the low bits and storing the …","Multiply two <code>u64</code>, outputting the low bits and storing the …","Multiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …","Multiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …","Lanewise <code>a * b</code> with lanes as <code>i16</code>, keep the high bits of …","Multiply the <code>i16</code> lanes and keep the high half of each …","Lanewise <code>a * b</code> with lanes as <code>i16</code>, keep the low bits of the …","Multiply the <code>i16</code> lanes and keep the low half of each …","Multiply <code>i16</code> lanes into <code>i32</code> intermediates, keep the high …","Multiply <code>i16</code> lanes into <code>i32</code> intermediates, keep the high …","Lanewise <code>a * b</code> with lanes as <code>i32</code>, keep the low bits of the …","Multiply the <code>i32</code> lanes and keep the low half of each …","Performs a “carryless” multiplication of two <code>i64</code> …","Performs a “carryless” multiplication of two <code>i64</code> …","Multiply the lower <code>i32</code> within each <code>i64</code> lane, <code>i64</code> output.","Lanewise <code>a * b</code>.","Low lane <code>a * b</code>, other lanes unchanged.","Lanewise <code>a * b</code>.","Lowest lane <code>a * b</code>, high lane unchanged.","Lanewise <code>a * b</code> with <code>f32</code> lanes.","Lanewise <code>a * b</code> with <code>f64</code> lanes.","Lanewise <code>a * b</code> with lanes as <code>u16</code>, keep the high bits of …","Multiply the <code>u16</code> lanes and keep the high half of each …","Multiply the lower <code>u32</code> within each <code>u64</code> lane, <code>u64</code> output.","This is dumb and weird.","This is dumb and weird.","Multiplies the odd <code>i32</code> lanes and gives the widened (<code>i64</code>) …","Multiplies the odd <code>u32</code> lanes and gives the widened (<code>u64</code>) …","Computes eight <code>u16</code> “sum of absolute difference” values …","Computes eight <code>u16</code> “sum of absolute difference” values …","Computes eight <code>u16</code> “sum of absolute difference” values …","Computes eight <code>u16</code> “sum of absolute difference” values …","An explanation of the crate’s naming conventions.","","","","","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Saturating convert <code>i16</code> to <code>i8</code>, and pack the values.","Saturating convert <code>i16</code> to <code>i8</code>, and pack the values.","Saturating convert <code>i16</code> to <code>u8</code>, and pack the values.","Saturating convert <code>i16</code> to <code>u8</code>, and pack the values.","Saturating convert <code>i32</code> to <code>i16</code>, and pack the values.","Saturating convert <code>i32</code> to <code>i16</code>, and pack the values.","Saturating convert <code>i32</code> to <code>u16</code>, and pack the values.","Saturating convert <code>i32</code> to <code>u16</code>, and pack the values.","Count the number of bits set within an <code>i32</code>","Count the number of bits set within an <code>i64</code>","Deposit contiguous low bits from a <code>u32</code> according to a mask.","Deposit contiguous low bits from a <code>u64</code> according to a mask.","Extract bits from a <code>u32</code> according to a mask.","Extract bits from a <code>u64</code> according to a mask.","Try to obtain a random <code>u16</code> from the hardware RNG.","Try to obtain a random <code>u32</code> from the hardware RNG.","Try to obtain a random <code>u64</code> from the hardware RNG.","Try to obtain a random <code>u16</code> from the hardware RNG.","Try to obtain a random <code>u32</code> from the hardware RNG.","Try to obtain a random <code>u64</code> from the hardware RNG.","Reads the CPU’s timestamp counter value.","Reads the CPU’s timestamp counter value and store the …","Lanewise <code>1.0 / a</code> approximation.","Low lane <code>1.0 / a</code> approximation, other lanes unchanged.","Reciprocal of <code>f32</code> lanes.","Lanewise <code>1.0 / sqrt(a)</code> approximation.","Low lane <code>1.0 / sqrt(a)</code> approximation, other lanes …","Reciprocal of <code>f32</code> lanes.","Rounds each lane in the style specified.","Rounds each lane in the style specified.","Rounds <code>$b</code> low as specified, other lanes use <code>$a</code>.","Rounds <code>$b</code> low as specified, other lanes use <code>$a</code>.","Rounds each lane in the style specified.","Rounds each lane in the style specified.","Rounds <code>$b</code> low as specified, keeps <code>$a</code> high.","Rounds <code>$b</code> low as specified, keeps <code>$a</code> high.","Rounds each lane in the style specified.","Rounds each lane in the style specified.","Rounds each lane in the style specified.","Rounds each lane in the style specified.","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set <code>i16</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set an <code>i32</code> as the low 32-bit lane of an <code>m128i</code>, other lanes …","Set <code>i32</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set an <code>i64</code> as the low 64-bit lane of an <code>m128i</code>, other lanes …","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set <code>i8</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128</code>, first arg is the high lane.","Sets the args into an <code>m128</code>, first arg is the high lane.","Sets the args into an <code>m128d</code>, first arg is the high lane.","Set <code>m128d</code> args into an <code>m256d</code>.","Sets the args into the low lane of a <code>m128d</code>.","Set <code>m128i</code> args into an <code>m256i</code>.","Set <code>f32</code> args into an <code>m256</code> lane.","Set <code>f64</code> args into an <code>m256d</code> lane.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Set <code>i16</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Set <code>i32</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Set <code>i8</code> args into an <code>m256i</code> lane.","Sets the args into an <code>m128</code>, first arg is the low lane.","Sets the args into an <code>m128d</code>, first arg is the low lane.","Set <code>m128d</code> args into an <code>m256d</code>.","Set <code>m128i</code> args into an <code>m256i</code>.","Set <code>f32</code> args into an <code>m256</code> lane.","Set <code>f64</code> args into an <code>m256d</code> lane.","Splats the <code>i16</code> to all lanes of the <code>m128i</code>.","Sets the lowest <code>i16</code> lane of an <code>m128i</code> as all lanes of an …","Splat an <code>i16</code> arg into an <code>m256i</code> lane.","Splats the <code>i32</code> to all lanes of the <code>m128i</code>.","Sets the lowest <code>i32</code> lane of an <code>m128i</code> as all lanes of an …","Splat an <code>i32</code> arg into an <code>m256i</code> lane.","Splats the <code>i64</code> to both lanes of the <code>m128i</code>.","Sets the lowest <code>i64</code> lane of an <code>m128i</code> as all lanes of an …","Splats the <code>i8</code> to all lanes of the <code>m128i</code>.","Sets the lowest <code>i8</code> lane of an <code>m128i</code> as all lanes of an …","Splat an <code>i8</code> arg into an <code>m256i</code> lane.","Splats the value to all lanes.","Sets the lowest lane of an <code>m128</code> as all lanes of an <code>m256</code>.","Splats the args into both lanes of the <code>m128d</code>.","Sets the lowest lane of an <code>m128d</code> as all lanes of an <code>m256d</code>.","Splat an <code>f32</code> arg into an <code>m256</code> lane.","Splat an <code>f64</code> arg into an <code>m256d</code> lane.","Shift all <code>u16</code> lanes to the left by the <code>count</code> in the lower …","Lanewise <code>u16</code> shift left by the lower <code>u64</code> lane of <code>count</code>.","Shift all <code>u32</code> lanes to the left by the <code>count</code> in the lower …","Shift all <code>u32</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.","Shift all <code>u64</code> lanes to the left by the <code>count</code> in the lower …","Shift all <code>u64</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.","Shift <code>u32</code> values to the left by <code>count</code> bits.","Lanewise <code>u32</code> shift left by the matching <code>i32</code> lane in <code>count</code>.","Shift <code>u64</code> values to the left by <code>count</code> bits.","Lanewise <code>u64</code> shift left by the matching <code>u64</code> lane in <code>count</code>.","Shifts all <code>u16</code> lanes left by an immediate.","Shifts all <code>u16</code> lanes left by an immediate.","Shifts all <code>u16</code> lanes left by an immediate.","Shifts all <code>u16</code> lanes left by an immediate.","Shifts all <code>u32</code> lanes left by an immediate.","Shifts all <code>u32</code> lanes left by an immediate.","Shifts all <code>u32</code> lanes left by an immediate.","Shifts all <code>u32</code> lanes left by an immediate.","Shifts both <code>u64</code> lanes left by an immediate.","Shifts both <code>u64</code> lanes left by an immediate.","Shifts all <code>u64</code> lanes left by an immediate.","Shifts all <code>u64</code> lanes left by an immediate.","Shift each <code>i16</code> lane to the right by the <code>count</code> in the lower …","Lanewise <code>i16</code> shift right by the lower <code>i64</code> lane of <code>count</code>.","Shift each <code>i32</code> lane to the right by the <code>count</code> in the lower …","Lanewise <code>i32</code> shift right by the lower <code>i64</code> lane of <code>count</code>.","Shift each <code>u16</code> lane to the right by the <code>count</code> in the lower …","Lanewise <code>u16</code> shift right by the lower <code>u64</code> lane of <code>count</code>.","Shift each <code>u32</code> lane to the right by the <code>count</code> in the lower …","Lanewise <code>u32</code> shift right by the lower <code>u64</code> lane of <code>count</code>.","Shift each <code>u64</code> lane to the right by the <code>count</code> in the lower …","Lanewise <code>u64</code> shift right by the lower <code>u64</code> lane of <code>count</code>.","Shift <code>i32</code> values to the right by <code>count</code> bits.","Lanewise <code>i32</code> shift right by the matching <code>i32</code> lane in <code>count</code>.","Shift <code>u32</code> values to the left by <code>count</code> bits.","Lanewise <code>u32</code> shift right by the matching <code>u32</code> lane in <code>count</code>.","Shift <code>u64</code> values to the left by <code>count</code> bits.","Lanewise <code>u64</code> shift right by the matching <code>i64</code> lane in <code>count</code>.","Shifts all <code>i16</code> lanes right by an immediate.","Shifts all <code>i16</code> lanes right by an immediate.","Shifts all <code>i16</code> lanes left by an immediate.","Shifts all <code>i16</code> lanes left by an immediate.","Shifts all <code>i32</code> lanes right by an immediate.","Shifts all <code>i32</code> lanes right by an immediate.","Shifts all <code>i32</code> lanes left by an immediate.","Shifts all <code>i32</code> lanes left by an immediate.","Shifts all <code>u16</code> lanes right by an immediate.","Shifts all <code>u16</code> lanes right by an immediate.","Shifts all <code>u16</code> lanes right by an immediate.","Shifts all <code>u16</code> lanes right by an immediate.","Shifts all <code>u32</code> lanes right by an immediate.","Shifts all <code>u32</code> lanes right by an immediate.","Shifts all <code>u32</code> lanes right by an immediate.","Shifts all <code>u32</code> lanes right by an immediate.","Shifts both <code>u64</code> lanes right by an immediate.","Shifts both <code>u64</code> lanes right by an immediate.","Shifts all <code>u64</code> lanes right by an immediate.","Shifts all <code>u64</code> lanes right by an immediate.","Shuffle 128 bits of floating point data at a time from <code>$a</code> …","Shuffle 128 bits of floating point data at a time from <code>$a</code> …","Shuffle 128 bits of floating point data at a time from <code>$a</code> …","Shuffle 128 bits of floating point data at a time from <code>$a</code> …","<em>Slowly</em> swizzle 128 bits of integer data from <code>$a</code> and <code>$b</code> …","<em>Slowly</em> swizzle 128 bits of integer data from <code>$a</code> and <code>$b</code> …","Shuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle 128 bits of integer data from <code>$a</code> and <code>$b</code> using an …","Shuffle 128 bits of integer data from <code>$a</code> and <code>$b</code> using an …","Shuffle the <code>f32</code> lanes from <code>$a</code> using an immediate control …","Shuffle the <code>f32</code> lanes from <code>$a</code> using an immediate control …","Shuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes from <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes from <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …","Shuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …","Shuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …","Shuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …","Shuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …","Shuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …","Shuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …","Shuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control …","Shuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control …","Shuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.","Shuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.","Shuffle <code>f64</code> lanes in <code>a</code> using <strong>bit 1</strong> of the <code>i64</code> lanes in <code>v</code>","Shuffle <code>f64</code> lanes in <code>a</code> using <strong>bit 1</strong> of the <code>i64</code> lanes in <code>v</code>.","Shuffle <code>f32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.","Shuffle <code>i32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.","Shuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.","Shuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.","Applies the sign of <code>i16</code> values in <code>b</code> to the values in <code>a</code>.","Lanewise <code>a * signum(b)</code> with lanes as <code>i16</code>","Applies the sign of <code>i32</code> values in <code>b</code> to the values in <code>a</code>.","Lanewise <code>a * signum(b)</code> with lanes as <code>i32</code>","Applies the sign of <code>i8</code> values in <code>b</code> to the values in <code>a</code>.","Lanewise <code>a * signum(b)</code> with lanes as <code>i8</code>","Splat the lowest 16-bit lane across the entire 128 bits.","Splat the lowest 32-bit lane across the entire 128 bits.","Splat the lowest 64-bit lane across the entire 128 bits.","Splat the lowest 8-bit lane across the entire 128 bits.","Splat the lowest <code>f32</code> across all four lanes.","Splat the lower <code>f64</code> across both lanes of <code>m128d</code>.","Splat the 128-bits across 256-bits.","Lanewise <code>sqrt(a)</code>.","Low lane <code>sqrt(a)</code>, other lanes unchanged.","Lanewise <code>sqrt(a)</code>.","Low lane <code>sqrt(b)</code>, upper lane is unchanged from <code>a</code>.","Lanewise <code>sqrt</code> on <code>f64</code> lanes.","Lanewise <code>sqrt</code> on <code>f64</code> lanes.","Stores the high lane value to the reference given.","Stores the value to the reference given.","Stores the value to the reference given.","Stores the low lane value to the reference given.","Stores the value to the reference given.","Stores the low lane value to the reference given.","Stores the value to the reference given.","Store data from a register into memory.","Store data from a register into memory.","Store data from a register into memory.","Stores the <code>i32</code> masked lanes given to the reference.","Stores the <code>i32</code> masked lanes given to the reference.","Stores the <code>i32</code> masked lanes given to the reference.","Stores the <code>i32</code> masked lanes given to the reference.","Store data from a register into memory according to a mask.","Store data from a register into memory according to a mask.","Store data from a register into memory according to a mask.","Store data from a register into memory according to a mask.","Stores the value to the reference given in reverse order.","Stores the value to the reference given.","Stores the low lane value to all lanes of the reference …","Stores the low lane value to all lanes of the reference …","Store data from a register into memory.","Store data from a register into memory.","Store data from a register into memory.","Stores the value to the reference given.","Stores the value to the reference given.","Stores the value to the reference given.","Store data from a register into memory.","Store data from a register into memory.","Store data from a register into memory.","Looks for <code>$needle</code> in <code>$haystack</code> and gives the index of the …","Looks for <code>$needle</code> in <code>$haystack</code> and gives the index of the …","Looks for <code>$needle</code> in <code>$haystack</code> and gives the mask of where …","Looks for <code>$needle</code> in <code>$haystack</code> and gives the mask of where …","","","","","","","","","Subtract horizontal pairs of <code>i16</code> values, pack the outputs …","Horizontal <code>a - b</code> with lanes as <code>i16</code>.","Subtract horizontal pairs of <code>i32</code> values, pack the outputs …","Horizontal <code>a - b</code> with lanes as <code>i32</code>.","Subtract each lane horizontally, pack the outputs as <code>a</code> …","Subtract each lane horizontally, pack the outputs as <code>a</code> …","Subtract adjacent <code>f32</code> lanes.","Subtract adjacent <code>f64</code> lanes.","Subtract horizontal pairs of <code>i16</code> values, saturating, pack …","Horizontal saturating <code>a - b</code> with lanes as <code>i16</code>.","Lanewise <code>a - b</code> with lanes as <code>i16</code>.","Lanewise <code>a - b</code> with lanes as <code>i16</code>.","Lanewise <code>a - b</code> with lanes as <code>i32</code>.","Lanewise <code>a - b</code> with lanes as <code>i32</code>.","Lanewise <code>a - b</code> with lanes as <code>i64</code>.","Lanewise <code>a - b</code> with lanes as <code>i64</code>.","Lanewise <code>a - b</code> with lanes as <code>i8</code>.","Lanewise <code>a - b</code> with lanes as <code>i8</code>.","Lanewise <code>a - b</code>.","Low lane <code>a - b</code>, other lanes unchanged.","Lanewise <code>a - b</code>.","Lowest lane <code>a - b</code>, high lane unchanged.","Lanewise <code>a - b</code> with <code>f32</code> lanes.","Lanewise <code>a - b</code> with <code>f64</code> lanes.","Lanewise saturating <code>a - b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u8</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u8</code>.","Compute “sum of <code>u8</code> absolute differences”.","Compute “sum of <code>u8</code> absolute differences”.","Tests if all bits are 1.","Returns if all masked bits are 0, <code>(a &amp; mask) as u128 == 0</code>","Returns if, among the masked bits, there’s both 0s and 1s","Transmutes the <code>m128</code> to an array.","Transmutes the <code>m128d</code> to an array.","Transmutes the <code>m256</code> to an array.","Transmutes the <code>m256d</code> to an array.","Converts into the bit patterns of these floats (<code>[u32;4]</code>).","Converts into the bit patterns of these doubles (<code>[u64;2]</code>).","Converts into the bit patterns of these floats (<code>[u32;8]</code>).","Converts into the bit patterns of these doubles (<code>[u64;4]</code>).","Counts the number of trailing zero bits in a <code>u32</code>.","Counts the number of trailing zero bits in a <code>u64</code>.","Transpose four <code>m128</code> as if they were a 4x4 matrix.","Truncate the <code>f32</code> lanes to <code>i32</code> lanes.","Truncate the <code>f64</code> lanes to the lower <code>i32</code> lanes (upper <code>i32</code> …","Truncate the lower lane into an <code>i32</code>.","Truncate the lower lane into an <code>i64</code>.","","","","","","","","","","","","","","","","","","","Unpack and interleave the high lanes.","Unpack and interleave the high lanes.","Unpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high lanes of <code>a</code> and <code>b</code>.","Unpack and interleave the high lanes.","Unpack and interleave the high lanes.","Unpack and interleave low <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low lanes of <code>a</code> and <code>b</code>.","Zero extend an <code>m128</code> to <code>m256</code>","Zero extend an <code>m128d</code> to <code>m256d</code>","Zero extend an <code>m128i</code> to <code>m256i</code>","All lanes zero.","Both lanes zero.","All lanes zero.","A zeroed <code>m256</code>","A zeroed <code>m256d</code>","A zeroed <code>m256i</code>"],"i":[0,0,0,0,0,0,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,3,4,1,5,6,2,0,0,0,0,0,0,3,4,1,5,6,2,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,3,3,4,4,1,1,1,1,1,1,1,1,1,1,1,5,5,6,6,2,2,2,2,2,2,2,2,2,2,2,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,3,4,1,5,6,2,3,4,1,5,6,2,3,4,1,5,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[[8,9,9,9],8],[[8,10,10,10],8],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[1,1],0,0,[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[9,9],9],[[10,10],10],[[9,9,9],9],[[10,9,9],10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[[9,9],9],[[10,9],10],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[3,3],7],[[4,4],7],[[1,1],7],[[5,5],7],[[6,6],7],[[2,2],7],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[9,9],9],[[10,10],10],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[3,3],7],[[4,4],7],[[1,1],7],[[5,5],7],[[6,6],7],[[2,2],7],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],[[3,3],7],[[4,4],7],[[1,1],7],[[5,5],7],[[6,6],7],[[2,2],7],[[3,3],3],[[4,4],4],[[1,1],1],[[5,5],5],[[6,6],6],[[2,2],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[11,11],[12,12],[4,3],[1,3],[5,3],[3,4],[1,4],[6,4],[3,1],[4,1],[2,1],[6,5],[2,5],[5,6],[2,6],[5,2],[6,2],[3,3],[[3,3],3],[4,4],[[4,4],4],[5,5],[6,6],[3,3],[4,4],[1,1],[5,5],[6,6],[2,2],[[3,3],11],[[4,4],11],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],11],[[4,4],11],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],11],[[4,4],11],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],11],[[4,4],11],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],11],[[4,4],11],[[1,1],1],[[1,1],1],[[1,1],1],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],11],[[4,4],11],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],0,0,0,0,0,0,0,0,0,0,0,0,[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],0,0,0,0,0,0,[[3,11],3],[[4,11],4],[[4,12],4],[[4,3],4],[[3,4],3],[5,13],[6,14],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[2,11],[1,1],[1,1],[3,1],[4,1],[6,1],[1,2],[1,2],[5,2],[1,2],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[4,3],[6,3],[1,4],[3,4],[2,5],[1,6],[3,6],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[6,1],[5,2],[1,1],[[4,4],4],[[9,15],9],[[9,9],9],[[10,10],10],[[9,8],9],[[],3],[[],4],[[],1],[[],5],[[],6],[[],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],0,0,0,0,0,0,[3,3],[5,5],[4,4],[3,3],[5,5],[6,6],[[3,3],16],[[4,4],16],[[1,1],16],[[5,5],16],[[6,6],16],[[2,2],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,3],[[3,3],3],[4,4],[[4,4],4],[5,5],[6,6],[[3,17],18],[[3,17],18],[[3,17],18],[[3,17],18],[[3,17],18],[[3,17],18],[[3,17],18],[[3,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[4,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[1,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[5,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[6,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[[2,17],18],[-1,-1,[]],[[[19,[13]]],3],[-1,-1,[]],[[[19,[14]]],4],[[[19,[15]]],1],[20,1],[[[19,[9]]],1],[[[19,[10]]],1],[[[19,[12]]],1],[21,1],[[[19,[8]]],1],[[[19,[22]]],1],[[[19,[23]]],1],[-1,-1,[]],[[[19,[11]]],1],[[[19,[13]]],5],[-1,-1,[]],[-1,-1,[]],[[[19,[14]]],6],[[[19,[22]]],2],[[[19,[23]]],2],[[[19,[10]]],2],[[[19,[21]]],2],[-1,-1,[]],[[[19,[8]]],2],[[[19,[9]]],2],[[[19,[15]]],2],[[[19,[12]]],2],[[[19,[11]]],2],[[[19,[20]]],2],[[[19,[13]]],3],[[[19,[14]]],4],[[[19,[13]]],5],[[[19,[14]]],6],[[[19,[9]]],3],[[[19,[10]]],4],[[[19,[9]]],5],[[[19,[10]]],6],[[3,3,3],3],[[3,3,3],3],[[4,4,4],4],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[3,3,3],3],[[4,4,4],4],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[3,3,3],3],[[4,4,4],4],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[3,3,3],3],[[4,4,4],4],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[3,13],[4,14],[3,11],[4,11],[1,11],[4,12],[1,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[13,3],[13,3],[13,5],[14,4],[14,4],[14,6],[1,1],[3,3],[3,5],[4,4],[4,6],[1,1],[5,5],[6,6],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,1],3],[[4,1],4],[[5,2],5],[[6,2],6],[[4,14],4],[[4,14],4],[3,3],[4,4],[[[19,[13]],[19,[13]]],5],[[[19,[14]],[19,[14]]],6],[[[19,[23]],[19,[23]]],2],[[[19,[13]]],3],[[[19,[14]]],4],[[[19,[8]]],1],[[[19,[13]]],5],[[[19,[14]]],6],[[[19,[23]]],2],0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],[1,1],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[3,3],3],[1,11],[3,11],[4,11],[5,11],[6,11],[2,11],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[[9,9,9],9],[[10,10,10],10],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],0,0,[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[1,1],1],0,0,0,0,0,[3,3],[4,4],[5,5],[6,6],[3,3],[4,4],[1,1],[5,5],[6,6],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[11,11],[12,11],[[9,9],9],[[10,10],10],[[9,9],9],[[10,10],10],[15,11],[9,11],[10,11],[15,11],[9,11],[10,11],[[],10],[9,10],[3,3],[3,3],[5,5],[3,3],[3,3],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,[[22,22,22,22,22,22,22,22],1],[[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],2],[[11,11,11,11],1],[11,1],[[11,11,11,11,11,11,11,11],2],[[12,12],1],[12,1],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],1],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],2],[[13,13,13,13],3],[13,3],[[14,14],4],[[4,4],6],[14,4],[[1,1],2],[[13,13,13,13,13,13,13,13],5],[[14,14,14,14],6],[[22,22,22,22,22,22,22,22],1],[[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],2],[[11,11,11,11],1],[[11,11,11,11,11,11,11,11],2],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],1],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],2],[[13,13,13,13],3],[[14,14],4],[[4,4],6],[[1,1],2],[[13,13,13,13,13,13,13,13],5],[[14,14,14,14],6],[22,1],[1,2],[22,2],[11,1],[1,2],[11,2],[12,1],[1,2],[23,1],[1,2],[23,2],[13,3],[3,5],[14,4],[4,6],[13,5],[14,6],[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,1],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,1],3],[[5,2],5],[[4,1],4],[[6,2],6],[[5,2],5],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[1,1],[1,1],[1,1],[3,3],[4,4],[1,2],[3,3],[3,3],[4,4],[[4,4],4],[5,5],[6,6],[[14,4],7],[[12,1],7],[[3,3],7],[[13,3],7],[[4,4],7],[[14,4],7],[[1,1],7],[[5,5],7],[[6,6],7],[[2,2],7],[[1,1,1],7],[[2,2,2],7],[[1,1,1],7],[[2,2,2],7],[[3,1,3],7],[[4,1,4],7],[[5,2,5],7],[[6,2,6],7],[[3,3],7],[[4,4],7],[[3,3],7],[[4,4],7],[[[19,[13]],[19,[13]],5],7],[[[19,[14]],[19,[14]],6],7],[[[19,[23]],[19,[23]],2],7],[[[19,[13]],3],7],[[[19,[14]],4],7],[[[19,[8]],1],7],[[[19,[13]],5],7],[[[19,[14]],6],7],[[[19,[23]],2],7],0,0,0,0,[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[4,4],4],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,11],[[1,1],11],[[1,1],11],[3,[[19,[13]]]],[4,[[19,[14]]]],[5,[[19,[13]]]],[6,[[19,[14]]]],[3,[[19,[9]]]],[4,[[19,[10]]]],[5,[[19,[9]]]],[6,[[19,[10]]]],[9,9],[10,10],[[3,3,3,3],7],[3,1],[4,1],[4,11],[4,12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[3,5],[4,6],[1,2],[[],3],[[],4],[[],1],[[],5],[[],6],[[],2]],"c":[],"p":[[5,"m128i",0],[5,"m256i",0],[5,"m128",0],[5,"m128d",0],[5,"m256",0],[5,"m256d",0],[1,"tuple"],[1,"u8"],[1,"u32"],[1,"u64"],[1,"i32"],[1,"i64"],[1,"f32"],[1,"f64"],[1,"u16"],[1,"bool"],[5,"Formatter",1082],[8,"Result",1082],[1,"array"],[1,"u128"],[1,"i128"],[1,"i16"],[1,"i8"],[6,"Result",1083],[5,"TypeId",1084]],"b":[[427,"impl-UpperExp-for-m128"],[428,"impl-LowerHex-for-m128"],[429,"impl-LowerExp-for-m128"],[430,"impl-Display-for-m128"],[431,"impl-Debug-for-m128"],[432,"impl-Octal-for-m128"],[433,"impl-UpperHex-for-m128"],[434,"impl-Binary-for-m128"],[435,"impl-LowerExp-for-m128d"],[436,"impl-UpperHex-for-m128d"],[437,"impl-Binary-for-m128d"],[438,"impl-Display-for-m128d"],[439,"impl-UpperExp-for-m128d"],[440,"impl-Octal-for-m128d"],[441,"impl-Debug-for-m128d"],[442,"impl-LowerHex-for-m128d"],[443,"impl-UpperHex-for-m128i"],[444,"impl-LowerHex-for-m128i"],[445,"impl-Display-for-m128i"],[446,"impl-Octal-for-m128i"],[447,"impl-Binary-for-m128i"],[448,"impl-LowerExp-for-m128i"],[449,"impl-Debug-for-m128i"],[450,"impl-UpperExp-for-m128i"],[451,"impl-Debug-for-m256"],[452,"impl-UpperHex-for-m256"],[453,"impl-Binary-for-m256"],[454,"impl-Octal-for-m256"],[455,"impl-Display-for-m256"],[456,"impl-LowerHex-for-m256"],[457,"impl-UpperExp-for-m256"],[458,"impl-LowerExp-for-m256"],[459,"impl-Debug-for-m256d"],[460,"impl-LowerHex-for-m256d"],[461,"impl-UpperHex-for-m256d"],[462,"impl-Binary-for-m256d"],[463,"impl-Display-for-m256d"],[464,"impl-UpperExp-for-m256d"],[465,"impl-Octal-for-m256d"],[466,"impl-LowerExp-for-m256d"],[467,"impl-Octal-for-m256i"],[468,"impl-UpperHex-for-m256i"],[469,"impl-Display-for-m256i"],[470,"impl-UpperExp-for-m256i"],[471,"impl-Binary-for-m256i"],[472,"impl-Debug-for-m256i"],[473,"impl-LowerExp-for-m256i"],[474,"impl-LowerHex-for-m256i"],[479,"impl-From%3C%5Bu16;+8%5D%3E-for-m128i"],[480,"impl-From%3Cu128%3E-for-m128i"],[481,"impl-From%3C%5Bu32;+4%5D%3E-for-m128i"],[482,"impl-From%3C%5Bu64;+2%5D%3E-for-m128i"],[483,"impl-From%3C%5Bi64;+2%5D%3E-for-m128i"],[484,"impl-From%3Ci128%3E-for-m128i"],[485,"impl-From%3C%5Bu8;+16%5D%3E-for-m128i"],[486,"impl-From%3C%5Bi16;+8%5D%3E-for-m128i"],[487,"impl-From%3C%5Bi8;+16%5D%3E-for-m128i"],[489,"impl-From%3C%5Bi32;+4%5D%3E-for-m128i"],[494,"impl-From%3C%5Bi16;+16%5D%3E-for-m256i"],[495,"impl-From%3C%5Bi8;+32%5D%3E-for-m256i"],[496,"impl-From%3C%5Bu64;+4%5D%3E-for-m256i"],[497,"impl-From%3C%5Bi128;+2%5D%3E-for-m256i"],[499,"impl-From%3C%5Bu8;+32%5D%3E-for-m256i"],[500,"impl-From%3C%5Bu32;+8%5D%3E-for-m256i"],[501,"impl-From%3C%5Bu16;+16%5D%3E-for-m256i"],[502,"impl-From%3C%5Bi64;+4%5D%3E-for-m256i"],[503,"impl-From%3C%5Bi32;+8%5D%3E-for-m256i"],[504,"impl-From%3C%5Bu128;+2%5D%3E-for-m256i"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
